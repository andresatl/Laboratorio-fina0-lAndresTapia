name: CI
on:
  push:
    branches:
      - feature-laboratorio-final-AndresTapia

jobs:
  Buildapp:
    runs-on: ubuntu-latest
    steps:

    #- name: Set up JDK 17
      #uses: actions/setup-java@v2 
      #with:
        #java-version: '17'
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '16'

    - name: Install depencies
      run: npm install

    - name: Build
      run: npm run build

  SAST:
    needs: Buildapp
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      #with:
        #fetch-depth: 0
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '16'

    - name: Install depencies
      run: npm install

    - name: Build
      run: npm run build
      
    - name: Setup Java JDK
      uses: actions/setup-java@v4.2.1
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Analisis SonarCloud
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        SONAR_TOKEN: ${{secrets.SONAR_TOKEN}}
        
    - name: SonarQube Quality Gate Check
      env:
        SONAR_TOKEN: ${{secrets.SONAR_TOKEN}}
      uses: SonarSource/sonarqube-quality-gate-action@master
      
#--------------------- SCA -------------------------------------------
  SCA:
    needs: SAST
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '16'

    - name: Install depencies
      run: |
        npm install
        yarn install

    - name: Build
      run: npm run build

    - name: Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      env:
        JAVA_HOME: /opt/jdk
      id: Depcheck
      with:
        project: '{{ github.event.repository.name }}'
        path: '.'
        format: 'HTML'
        out: 'reports'
        args: >
          --failOnCVSS 11
          --enableRetired
     
    - name: Upload Test result
      uses: actions/upload-artifact@master
      with:
        name: Depcheck report
        path: ${{github.workspace}}/reports

# ----------------- Docker Build Image ----------------------------------------
  
  DockerBuild-SCAN:
    needs: SCA
    runs-on: ubuntu-latest
    steps:

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Docker Login
      uses: docker/login-action@v3.0.0
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Set up Docker
      uses: docker/setup-buildx-action@v3

    - name: Docker Build 
      run: |
        docker build -t andresatl/finalat-devsecops:latest .
#-------------------- Docker Scan ------------------------------------------
    - name: Prisma Cloud Scan
      uses: PaloAltoNetworks/prisma-cloud-scan@v1.6.5
      with:
        pcc_console_url: https://us-east1.cloud.twistlock.com/us-1-113035073
        pcc_user: ${{ secrets.pcc_user }}
        pcc_pass: ${{ secrets.pcc_pass }}
        image_name: andresatl/finalat-devsecops:latest 

    - name: Docker Push 
      run: |
        docker push andresatl/finalat-devsecops:latest

    #- name: Run Trivy vulnerability scanner
      #uses: aquasecurity/trivy-action@master
      #with:
        #image-ref: 'andresatl/pruebavul:latest'
        #ignore-unfixed: true 
        #format: 'table' 
#-------------------- DEPLOY------------------------------------------  
  DeployMiniKube:
      needs: DockerBuild-SCAN
      runs-on: self-hosted
      steps:
        - name: Clonacion de repositorio para deploy
          uses: actions/checkout@v4
        - name: Despliegue local
          run: |
            kubectl apply -f deploy.yaml
            
        - name: Get pods
          run: |
            #minikube service netflixat SERVICE
            kubectl get pods --all-namespaces  # Verify deployment
         
        - name: Wait for Services to be Ready
          run: |
            # Replace 'netflixat' with your service name
            kubectl wait --for=condition=ready pod -l app=netflixat --timeout=300s
            
            
#-------------------- DAST------------------------------------------  

  DAST:
    needs: DeployMiniKube
    runs-on: self-hosted
    steps:

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Get Minikube IP
      id: minikube-ip
      run: echo "::set-output name=ip::$(minikube ip)"

    #- name: Start OWASP ZAP
      #run: |
          #ocker pull ghcr.io/zaproxy/zaproxy:stable
          #docker run --rm -u zap -p 8080:8080 -i ghcr.io/zaproxy/zaproxy:stable zap.sh -daemon -port 8080 -host 0.0.0.0 -config api.disablekey=true

    - name: Wait for ZAP to start
      run: sleep 15  # Adjust sleep time as needed

    - name: ZAP Scan
      uses: zaproxy/action-baseline@v0.12.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
        target: 'http://127.0.0.1:65011'
        zap-baseline-url: 'http://localhost:8080'
        rules_file_name: 'zap-rules.tsv'
        cmd_options: '-a'
        allow_issue_writing: false

    - name: Upload ZAP Report
      uses: actions/upload-artifact@v2
      with:
        name: zap-report
        path: zap_report.html
          

        

        
